// main
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab2
{
    class Program
    {
        static void Main(string[] args)
        {
            double averageSquare = 0, minsquard = 0, a, b, c;
            int quantity = 0, n = 3 , m = 2;
            Triangle [] triangle = new Triangle[n];
            for (int i = 0; i < n; i++)
            {
                Console.Write("Enter side triangle \na = ");
                a = Convert.ToDouble(Console.ReadLine());
                while (a <= 0)
                {
                    Console.Write("Re-enter a = ");
                    a = Convert.ToDouble(Console.ReadLine());
                }
                Console.Write("b = ");
                b = Convert.ToDouble(Console.ReadLine());
                while (b <= 0)
                {
                    Console.Write("Re-enter b = ");
                    b = Convert.ToDouble(Console.ReadLine());
                }
                Console.Write("c = ");
                c = Convert.ToDouble(Console.ReadLine());
                while (a <= 0)
                {
                    Console.Write("Re-enter c = ");
                    c = Convert.ToDouble(Console.ReadLine());
                }
                triangle[i] = new Triangle(a, b, c);
                if (triangle[i].IsTriangle()== true)
                {
                    Console.WriteLine(triangle[i].PrintTriangle());
                }
                else
                {
                    Console.WriteLine("Triangle haven't");
                }
            }
            for (int i = 0; i < triangle.Length; i++)
            {
                if (triangle[i].square != -100)
                {
                    averageSquare += triangle[i].square;
                    quantity++;
                }
            }
            averageSquare /= quantity;
            Console.WriteLine("Average square triangle  = " + averageSquare);
            quantity = 0;
            IsoscelesTriangle[] isoscelesTriangle = new IsoscelesTriangle[m];
            for (int i = 0; i < isoscelesTriangle.Length; i++)
            {
                Console.Write("Enter side isosceles triangle \na = ");
                a = Convert.ToDouble(Console.ReadLine());
                while (a <= 0)
                {
                    Console.Write("Re-enter a = ");
                    a = Convert.ToDouble(Console.ReadLine());
                }
                Console.Write("b = ");
                b = Convert.ToDouble(Console.ReadLine());
                while (b <= 0)
                {
                    Console.Write("Re-enter b = ");
                    b = Convert.ToDouble(Console.ReadLine());
                }
                Console.Write("c = ");
                c = Convert.ToDouble(Console.ReadLine());
                while (a <= 0)
                {
                    Console.Write("Re-enter c = ");
                    c = Convert.ToDouble(Console.ReadLine());
                }
                isoscelesTriangle[i] = new IsoscelesTriangle(a,b,c);
                if (isoscelesTriangle[i].IsIsoscelesTriangle() == true)
                {
                    Console.WriteLine(isoscelesTriangle[i].PrintIsoscelesTriangle());
                }
                else
                {
                    Console.WriteLine("Triangle haven't or no isosceles triangle");
                }
            }
            for (int i = 0; i < isoscelesTriangle.Length; i++)
            {
                if (isoscelesTriangle[i].square != -100)
                {
                    minsquard = isoscelesTriangle[i].square;
                }
            }
            if (quantity > 1)
            {
                for (int i = 0; i < isoscelesTriangle.Length; i++)
                {
                    if (isoscelesTriangle[i].square != -100)
                    {
                        if (minsquard > isoscelesTriangle[i].square)
                            minsquard = isoscelesTriangle[i].square;
                    }
                }
                Console.WriteLine("Minimal squard isosceles triangle = " + minsquard);
            }
            else
            {
                Console.WriteLine("Minimal squard isosceles triangle = " + minsquard);
            }
        }
    }
}

//class Triangle

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab2
{
    class Triangle
    {
        protected double sideA;
        protected double sideB;
        protected double sideC;
        double a, b, c;
        double perimeter;
        double p;
        public double square;

        public Triangle(double sideA, double sideB, double sideC)
        {
            this.sideA = sideA;
            this.sideB = sideB;
            this.sideC = sideC;
        }
        public bool IsTriangle()
        {
            if ((sideA + sideB > sideC) && (sideB + sideC > sideA) && (sideA + sideC > sideB))
            {
                return true;
            }
            else
            {
                square = -100;
                return false;
            }
        }
        public string PrintTriangle ()
        {
            CornerTriangle();
            PerimeterTriangle();
            SquareTriangle();
            return "Triangle is (a = " + sideA + "; b = " + sideB + "; c = " + sideC + ")\nCorners triangle are(a = " + a + "; b = " + b + "; c = " + c + ")\nPerimeter triangle is " + perimeter + "\nSquare triangle is " + square;
        }
        public void CornerTriangle()
        {
            a = (Math.Acos((Math.Pow(sideA, 2) - (Math.Pow(sideB, 2) + Math.Pow(sideC, 2))) / (-2 * sideB * sideC)) * 180) / Math.PI;
            b = (Math.Acos((Math.Pow(sideB, 2) - (Math.Pow(sideA, 2) + Math.Pow(sideC, 2))) / (-2 * sideA * sideC)) * 180) / Math.PI;
            c = (Math.Acos((Math.Pow(sideC, 2) - (Math.Pow(sideB, 2) + Math.Pow(sideA, 2))) / (-2 * sideB * sideA)) * 180) / Math.PI;
        }
        public void PerimeterTriangle()
        {
            perimeter = sideA + sideB + sideC;
        }
        public void SquareTriangle()
        {
            p = (sideA + sideB + sideC) / 2;
            square = Math.Sqrt(p * (p - sideA) * (p - sideB) * (p - sideC));
        }

    }
}

// class IsoscelesTriangle

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Lab2
{
    class IsoscelesTriangle : Triangle
    {

        public IsoscelesTriangle(double sideA, double sideB, double sideC) : base(sideA, sideB, sideC)
        {

        }
        public bool IsIsoscelesTriangle()
        {
            if (base.IsTriangle() && ((sideA == sideB) || (sideB == sideC) || (sideA == sideC)))
            {
                return true;
            }
            else
            {
                square = -100;
                return false;
            }
        }
        public string PrintIsoscelesTriangle()
        {
            return PrintTriangle();
        }
        public void CornerIsoscelesTriangle()
        {
            base.CornerTriangle();
        }
        public void PerimeterIsoscelesTriangle()
        {
            base.PerimeterTriangle();
        }
        public void SquareIsoscelesTriangel()
        {
            base.SquareTriangle();
        }
    }
}
